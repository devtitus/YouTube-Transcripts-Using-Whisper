services:
  transcripts-service:
    build: .
    container_name: transcripts-app
    ports:
      - "5687:5687"  # Node.js API
    environment:
      - NODE_ENV=production
      - PORT=5687
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6382}
      - WEBHOOK_URL=${WEBHOOK_URL}
      
      # Groq Cloud Configuration
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_WHISPER_MODEL=${GROQ_WHISPER_MODEL}
      - GROQ_BASE_URL=${GROQ_BASE_URL:-https://api.groq.com/openai/v1}
      - GROQ_AUDIO_CODEC=${GROQ_AUDIO_CODEC:-aac}
      - GROQ_AUDIO_BITRATE_KBPS=${GROQ_AUDIO_BITRATE_KBPS:-32}
      - GROQ_CHUNK_SECONDS=${GROQ_CHUNK_SECONDS:-600}
      - GROQ_MAX_REQUEST_MB=${GROQ_MAX_REQUEST_MB:-15}
      - GROQ_TIMEOUT_MS=${GROQ_TIMEOUT_MS:-1800000}
      
    volumes:
      - audio_data:/app/audio_file
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5687/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  worker:
    build: .
    container_name: transcripts-worker
    command: npm run start:worker
    environment:
      - NODE_ENV=production
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6382}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - GROQ_API_KEY=${GROQ_API_KEY}
    volumes:
      - audio_data:/app/audio_file
    restart: unless-stopped
    depends_on:
      - redis

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6382:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  audio_data:
    driver: local
  redis_data:
    driver: local